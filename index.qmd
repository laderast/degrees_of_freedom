---
title: Degrees of Freedom
subtitle: Empower learners with Quarto, WebR, and Pyodide
author: Ted Laderas, PhD
engine: knitr
format: live-revealjs
resources:
    - data
pyodide:
    packages:
        - pandas
        - seaborn
webr:
    render-df: paged-table
    packages:
      - gradethis
      - dplyr
      - ggplot2
      - palmerpenguins
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}
{{< include ./_extensions/r-wasm/live/_gradethis.qmd >}}

```{webr}
#| autorun: true
#| echo: false
library(ggplot2)
library(dplyr)
tv_shows <- read.csv("data/tv_shows.csv")
my_plot <- 
  ggplot(tv_shows) + 
  aes(x = seasonNumber, y= av_rating, group=title, 
      color = title) + 
  geom_line()
```

```{pyodide}
#| autorun: true
#| echo: false
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
tv_shows = pd.read_csv("data/tv_shows.csv")
```

## Introduction

- Director of Training and Community for the [Data Science Lab at Fred Hutch Cancer Center](https://hutchdatascience.org)
- Teach a wide variety of workforce learners
- Passionate about evidence-based pedagogy and technology

## First Things First

- Do you want to increase active learning in your data science courses?
    - Less blank stares?
    - More discussion?
    - More interaction?

# Introducing Web Assembly
## R/Python in your browser

```{webr}
data(iris)
summary(iris)
```

## Why use WebR/Pyodide?

By using WebR/Pyodide/Quarto to:

- lower cognitive load, 
- encourage active learning, 
- and increase social learning, 

you engage students to explore R and Python, which results in more effective data science skill development at all stages in their learning.

# Lower Cognitive Load

## What is Cognitive Load?

- Our working memory is a bottleneck; only able to manage 4+/-2 items at once
- More than than that, we get overwhelmed
- Delivery of learning materials depends on managing working memory
- Instructional design is about reducing complexity and eliminating extraneous details

## A step before RStudio / VSCode

Lots of cognitive load before we even get started!

- Using the console is intimidating
- Installing R/RStudio without guidance
- RStudio Interface is overwhelming
- `install.packages()`
- **Fear of doing something wrong**

## Fear is Part of Cognitive Load

Everything we can do to alleviate fear, the less cognitive load learners will have.

## RStudio / VSCode can be overwhelming

- Context switching adds to the friction

![](rstudio.jpg)

## Lower Friction for New Learners

- Imagine you are brand new to working with programming.
- Imagine this is your first interaction with R or Python

## Exercise (Python)

Run the code chunk below by clicking "run code". 

Before you run it, what do you expect to see?

```{pyodide}
2 + 2
```

## Providing Encouragement using `{gradethis}`

- Giving feedback is important
- Focus attention to reduce fear
- [`{pygradethis}`](https://github.com/rstudio/pygradethis) is in progress

## Exercise with feedback

How would I find the `distinct()` `species` in penguins?

```{webr}
#| exercise: ex_1
#| setup: true
library(palmerpenguins)
library(dplyr)
```

```{webr}
#| exercise: ex_1
penguins |>
   _______(species)
```

::: {.solution exercise="ex_1"}
#### Solution

Use the `distinct()` function.

```{webr}
#| exercise: ex_1
#| solution: true
penguins |> 
    distinct(species)
```
:::

```{webr}
#| exercise: ex_1
#| check: true
gradethis::grade_this_code()
```

## What's Next?

- [x] Follow up with session on RStudio / Positron / VSCode
- [x] Have them work in Quarto
- [x] Use WebR/Pyodide for in-class exercises

# Use it for Active Learning 

## What is Active Learning?

- Learning by doing
- Activities that support and cement knowledge by application

## Active Learning

- Faded exercise design
- Inquiry based learning 
	- Model metalearning

## Faded Exercise Design

1. Fill in the blanks
2. More blanks
3. On their own

## Model Meta-learning

- Learning how to learn
- Help learners explore documentation

## Exercise (R) {.smaller}

Look at the [documentation for `arrange()`](https://dplyr.tidyverse.org/reference/arrange.html). Take a look at the examples.

How do we change the below code to sort by descending order?

```{webr}
#| exercise: ex_2
#| setup: true
library(palmerpenguins)
penguins <- penguins[1:6,]
library(dplyr)
```

```{webr}
#| exercise: ex_2
penguins |>
    arrange(body_mass_g)
```

::: {.solution exercise="ex_2"}
#### Solution

Use the `desc()` function.

```{webr}
#| exercise: ex_2
#| solution: true
penguins |>
    arrange(desc(body_mass_g))
```
:::

```{webr}
#| exercise: ex_2
#| check: true
gradethis::grade_this_code()
```
# Use it for Social Learning

## Social Learning {.incremental}

- Make your own design decisions
	- Better Tables
- Share packages for demos
    - Data Snacks

## [Better Plots](https://better-plots.netlify.app/) {.incremental}

::::{.columns}
:::{.column}
- Workshop about design principles for plots in R and Python
- Take a Paper Doll approach to improving plots
- Design in in the eye of the beholder
    - Discuss what works for you
- Sharing styling code with each other
:::
:::{.column}
![https://wifflegif.com/gifs/477310-making-mr-right-sneak-peek-gif](paperdoll.webp)
:::
::::

## Better Plots {.smaller}

Experiment with adding or removing to the graph, adding your own annotations.

If there's a show that you want to highlight, try adding an annotation to highlight it. Or try adding an annotation at Roseanne's lowest rating!

::::{.panel-tabset group="language"}
## R

```{webr}
my_plot + 
#    labs(title = "Is it better to burn out than fade away?",
         x="Season Number", y="Average Rating") + 
 # geom_vline(xintercept = 5, lty=3) +
 # annotate(geom="text", x = 7, y=8.5, 
 #         label = "The Walking\n Dead (brainzzz)") +
  scale_x_continuous(breaks = c(1:10))
```

## Python

```{pyodide}
my_plot = sns.lineplot(data=tv_shows,
                 x="seasonNumber",
                 y="av_rating",
                 hue="title")

#my_plot.set_title("Is it better to burn out than fade away?", fontsize=20)
#my_plot.set_xlabel ("Season Number", fontsize=15)
#my_plot.set_ylabel ("Average Rating", fontsize=15)
#my_plot.set_xticks(range(1,11))
#plt.axhline(y=7.8, linestyle="--")
#plt.text(x=7, y=8.5, s="The Walking\n Dead (brainzzz)")
plt.show()
```
::::


## [Data Snacks](https://hutchdatascience.org/data_snacks/)

::::{.columns}
:::{.column}
- Show students what is possible
:::
:::{.column}
![](datasnack.jpg)
:::
::::

## Note: Summative Assessment

- Using it for summative assessment is difficult
	- Technically difficult 
		- client side / source code is available in console
	- Come talk to George if you want to do this

# Getting Setup with WebR/Pyodide

## Getting Setup

- Start a quarto project
```
quarto create website my_project
```

- Install the quarto live plugin
```
quarto add r-wasm/quarto-live
```

## Front matter {auto-animate=true}

```yaml
---
engine: knitr
format: live-revealjs
resources:
    - data
---
```
- `format: live-revealjs` or `format: live-html`
- `resources:` - specify a folder or file in your repository to include

## Front matter (WebR) {auto-animate=true}

```yaml
---
engine: knitr
format: live-revealjs
resources:
    - data
webr:
    render-df: paged-table
    packages:
      - gradethis
      - dplyr
      - ggplot2
      - palmerpenguins
---
```

## Front matter (Pyodide) {auto-animate=true}

```yaml
---
engine: knitr
format: live-revealjs
resources:
    - data
pyodide:
    packages:
        - pandas
        - seaborn
---
```
	- `pyodide`: packages


## Transform your code chunks

	- `{r}` --> `{webr}`
	- `{python}` --> `{pyodide}`

## R -> WebR {auto-animate=true}

```{{r}}
data(iris)
summary(iris)
```
## R -> WebR {auto-animate=true}

```{{webr}}
data(iris)
summary(iris)
```

## R - WebR {auto-animate=true}

```{webr}
data(iris)
summary(iris)
```


## Conclusion

- 

## Miscellaneous

- Observable integration (have to know JS)
- Hook up WebR / Pyodide to Observable
		- Modern version of `crosstalk` - sliders and boxes
		- Reactive experience

