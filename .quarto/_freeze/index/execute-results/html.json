{
  "hash": "e6133f251f598f1e5f2701c06b0ead38",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Degrees of Freedom\nsubtitle: Empower learners with Quarto, WebR, and Pyodide\nauthor: Ted Laderas, PhD\nengine: knitr\nformat: live-revealjs\nresources:\n    - data\npyodide:\n    packages:\n        - pandas\n        - seaborn\nwebr:\n    render-df: paged-table\n    packages:\n      - gradethis\n      - dplyr\n      - ggplot2\n      - palmerpenguins\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})\n```\n:::\n\n\n\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\n#| echo: false\nlibrary(ggplot2)\nlibrary(dplyr)\ntv_shows <- read.csv(\"data/tv_shows.csv\")\nmy_plot <- \n  ggplot(tv_shows) + \n  aes(x = seasonNumber, y= av_rating, group=title, \n      color = title) + \n  geom_line()\n```\n:::\n\n\n\n::: {.cell autorun='true'}\n```{pyodide}\n#| autorun: true\n#| echo: false\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntv_shows = pd.read_csv(\"data/tv_shows.csv\")\nsns.set_theme()\nmy_plot = sns.lineplot(data=tv_shows,\n                 x=\"seasonNumber\",\n                 y=\"av_rating\",\n                 hue=\"title\")\n\n```\n:::\n\n\n## Introduction\n\n- Director of Training and Community for the Data Science Lab at Fred Hutch Cancer Center\n- Teach a wide variety of workforce learners\n- Passionate about evidence-based pedagogy\n\n## First Things First\n\n- Do you want to increase active learning in your data science courses?\n    - Less blank stares?\n    - More discussion?\n    - More interaction?\n\n# Introducing Web Assembly\n## R/Python in your browser\n\n\n::: {.cell}\n```{webr}\ndata(iris)\nsummary(iris)\n```\n:::\n\n\n## Why use WebR/Pyodide?\n\nBy using WebR/Pyodide/Quarto to:\n\n- lower cognitive load, \n- encourage active learning, \n- and increase social learning, \n\nyou engage students to explore R and Python, \nwhich results in more effective data science skill development.\n\n# Lower Cognitive Load\n\n## A step before RStudio / VSCode\n\nBarriers to learning:\n\n- Installing R/RStudio without guidance\n- RStudio Interface is overwhelming\n- `install.packages()`\n- **Fear of doing something wrong**\n\n## RStudio / VSCode can be overwhelming\n\n- Context switching adds to the friction\n\n![](rstudio.jpg)\n\n## Lower Friction for New Learners\n\n- Imagine you are brand new to working with programming.\n- Imagine this is your first interaction with R or Python\n\n## Exercise\n\nRun the code chunk below by clicking \"run code\". \n\nBefore you run it, what do you expect to see?\n\n\n::: {.cell}\n```{pyodide}\n2 + 2\n```\n:::\n\n\n## Providing Encouragement using `{gradethis}`\n\n- Giving feedback is important\n- Focus attention to reduce fear\n\n## Feedback example\n\nHow would I find the `distinct()` `species` in penguins?\n\n\n::: {.cell exercise='ex_1' setup='true'}\n```{webr}\n#| exercise: ex_1\n#| setup: true\nlibrary(palmerpenguins)\nlibrary(dplyr)\n```\n:::\n\n\n\n::: {.cell exercise='ex_1'}\n```{webr}\n#| exercise: ex_1\npenguins |>\n   _______(species)\n```\n:::\n\n\n::: {.solution exercise=\"ex_1\"}\n#### Solution\n\nUse the `distinct()` function.\n\n\n::: {.cell exercise='ex_1' solution='true'}\n```{webr}\n#| exercise: ex_1\n#| solution: true\npenguins |> \n    distinct(species)\n```\n:::\n\n:::\n\n\n::: {.cell exercise='ex_1' check='true'}\n```{webr}\n#| exercise: ex_1\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n## Blah\n\n- Works in revealJS\n- Lets learners jump right in without installs\n- Cover RStudio in a later session\n- Fear of doing something wrong - part of cognitive load\n\nFeedback is about focusing attention\nReducing fear to reduce cognitive load\n\n### Why?\n\n- Using RStudio in a first session can be overwhelming\n\t- Worse for python & python IDEs\n\t- Students who haven't used terminal\n\t- Avoid copy/paste loops / context-switching\n\t- Normalize Mistakes / error messages\n\t- Make it less scary\n- Use as a gentle first exposure to a computing language\n\t- R-Bootcamp\n- Provide feedback in early exercises\n\t- `gradethis`\n\t- leverage previous lessons\n\n# Use it for Active Learning \n\n## Active Learning\n\n- In revealJS slides (faded exercise design)\n\t- Keep it simple\n- Inquiry based learning \n\t- tailor experience to language\n\t- Modify code / Change parameters in an analysis\n- Data Snacks (show what's possible)\n \n## Model Meta-learning\n\n- Help learners explore documentation\n- Help \n\n## Exercise\n\nLook at the `arrange()` documentation below. Take a look at the examples.\n\n\n::: {.cell autorun='true'}\n```{webr}\n#| output: true\n#| autorun: true\n?arrange\n```\n:::\n\n\nHow do we change the below code to sort by descending order?\n\n\n::: {.cell exercise='ex_2' setup='true'}\n```{webr}\n#| exercise: ex_2\n#| setup: true\nlibrary(palmerpenguins)\nlibrary(dplyr)\n```\n:::\n\n\n\n::: {.cell exercise='ex_2'}\n```{webr}\n#| exercise: ex_2\npenguins |>\n    arrange(body_mass_g)\n```\n:::\n\n\n::: {.solution exercise=\"ex_2\"}\n#### Solution\n\nUse the `desc()` function.\n\n\n::: {.cell exercise='ex_2' solution='true'}\n```{webr}\n#| exercise: ex_2\n#| solution: true\npenguins |>\n    arrange(desc(body_mass_g))\n```\n:::\n\n:::\n\n## [Data Snacks](https://hutchdatascience.org/data_snacks/)\n\n- Show students what is possible\n\n\n\n# Use it for Social Learning\n\n## Social Learning\n\n- Encourage experimentation & collaboration\n\t- code sharing of snippets & modify code\n\t- improvise exercises to help learning\n- Use it for meta-learning \n\t- extending code by reading documentation\n- Make your own design decisions\n\t- Better Tables\n- Compare approaches (two methods/two groups)\n\t- Assess value of R/Python variable based on observable variable\n\t- Use unique ids to tailor for each learner\n\t- Students can compare solutions\n\n## Better Plots\n\nExperiment with the following modifications to the graph. If you have time, cut and paste the modifications you decided on in part 2 to your graph.\n\nIf there's a show that you want to highlight, try adding an annotation to highlight it. Or try adding an annotation at `Roseanne`'s lowest rating!\n\n::::{.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n```{webr}\nmy_plot + \n    labs(title = \"Is it better to burn out than fade away?\",x=\"Season Number\", y=\"Average Rating\") + \n  geom_vline(xintercept = 5, lty=3) +\n  annotate(geom=\"text\", x = 7, y=8.5, label = \"The Walking\\n Dead (brainzzz)\") +\n  scale_x_continuous(breaks = c(1:10))\n\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n```{pyodide}\nmy_plot = sns.lineplot(data=tv_shows,\n                 x=\"seasonNumber\",\n                 y=\"av_rating\",\n                 hue=\"title\")\n\n#my_plot.set_title(\"Is it better to burn out than fade away?\", fontsize=20)\n#my_plot.set_xlabel (\"Season Number\", fontsize=15)\n#my_plot.set_ylabel (\"Average Rating\", fontsize=15)\n#my_plot.set_xticks(range(1,11))\n#plt.axhline(y=7.8, linestyle=\"--\")\n#plt.text(x=7, y=8.5, s=\"The Walking\\n Dead (brainzzz)\")\nplt.show()\n```\n:::\n\n::::\n\n\n## Note: Summative Assessment\n\n- Using it for summative assessment is difficult\n\t- Technically difficult \n\t\t- client side / source code is available in console\n\t- Come talk to George if you want to do this\n\n# Getting Setup \n\n## Getting Setup with WebR/Pyodide\n\n- Start a quarto project \n- Install the quarto live plugin\n\t- Can use in HTML documents\n\t- Can use in revealJS presentations\n- YAML\n\t- `webr`: packages\n\t- `pyodide`: packages\n\t- `resources`: files / folders\n- - Host quarto doc on a website\n\n## Possible Questions / Feedback\n\n- When do I move them to RStudio?\n- Different features - are there different types of learners that it would be helpful for?\n\t- Adult learners\n\t- Stages of learning - how to use WebR/Pyodide to support them\n- Help us understand how WebR addresses learning stages\n- Reducing friction is important to effective learning\n- Defining each educational concept\n\t- Use a sentence to define what it means to you and how it relates to what you're talking about\n\t- My own stamp on the concepts - what it means to me\n\n## How to get started \n\n- Install the quarto-live extension\n- Use `format: live-html` or `format: live-revealjs`\n- Transform your code chunks\n\t- `{r}` --> `{webr}`\n\t- `{python}` --> `{pyodide}`\n\n## R -> WebR {auto-animate=true}\n\n```{{r}}\ndata(iris)\nsummary(iris)\n```\n## R -> WebR {auto-animate=true}\n\n```{{webr}}\ndata(iris)\nsummary(iris)\n```\n\n## R - WebR {auto-animate=true}\n\n\n::: {.cell}\n```{webr}\ndata(iris)\nsummary(iris)\n```\n:::\n\n\n\n## Conclusion\n\n- \n\n## Miscellaneous\n\n- Observable integration (have to know JS)\n- Hook up WebR / Pyodide to Observable\n\t\t- Modern version of `crosstalk` - sliders and boxes\n\t\t- Reactive experience\n\n## Next Steps\n\n- Closer to delivery of the talk\n- Draft Slides & Visuals / Framework\n\t- Take outline and have a running column\n- Narrative\n- How am I going to say this?\n- Deliver ~7 minutes of your talk\n\n\n\n## What is Quarto Live?\n\n\n::: {.cell}\n```{webr}\ndata(iris)\nsummary(iris)\n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}