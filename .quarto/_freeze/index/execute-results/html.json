{
  "hash": "0755961ef9ac5c602a01ad2a57de5ba1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Degrees of Freedom\nsubtitle: Empower learners with Quarto, WebR, and Pyodide\nauthor: Ted Laderas, PhD\nengine: knitr\nformat: \n    live-revealjs:\n        incremental: true\n        slide-number: true\nresources:\n    - data\npyodide:\n    packages:\n        - pandas\n        - seaborn\nwebr:\n    render-df: paged-table\n    packages:\n      - gradethis\n      - readr\n      - dplyr\n      - ggplot2\n      - palmerpenguins\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})\n```\n:::\n\n\n\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\n#| echo: false\nlibrary(ggplot2)\nlibrary(dplyr)\ntv_shows <- read.csv(\"data/tv_shows.csv\")\nmy_plot <- \n  ggplot(tv_shows) + \n  aes(x = seasonNumber, y= av_rating, group=title, \n      color = title) + \n  geom_line()\n```\n:::\n\n\n\n::: {.cell autorun='true'}\n```{pyodide}\n#| autorun: true\n#| echo: false\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntv_shows = pd.read_csv(\"data/tv_shows.csv\")\n```\n:::\n\n\n## I [did poorly] as an educator\n\n- R Class for workforce training\n- RStudio was overwhelming for a learner\n- They quit the course\n\n# What could have made the experience better?\n\n## Introducing WebR/Pyodide\n\n::::{.panel-tabset group=\"language\"}\n\n## R\n\n::: {.cell}\n```{webr}\nlibrary(readr)\ndata <- read_csv(\"data/cereal.csv\")\nsummary(data)\n```\n:::\n\n\n## Python\n\n::: {.cell}\n```{pyodide}\nimport pandas as pd\ndata = pd.read_csv(\"data/cereal.csv\")\ndata.info()\n```\n:::\n\n::::\n\n## WebR/Pyodide can Help\n\n- Lower cognitive load \n- Encourage active learning \n- Increase social learning \n\n# Lower Cognitive Load\n\n## Thoughts in a Learner's Brain \n\n::::{.columns}\n:::{.column}\n- What is R actually?\n- Variable? What's that?\n- Need to finish that report...\n- Got to pick up my daughter in an hour\n- Am I doing this right?\n- RStudio? OMG, I don't get it\n:::\n:::{.column #vcenter}\n:::{.fragment}\n**This is all cognitive load**\n:::\n:::\n::::\n\n## What can we help with?\n\n::::{.columns}\n:::{.column}\n::: {.nonincremental}\n- **What is R actually?**\n- **Variable? What's that?**\n- *Need to finish that report...*\n- *Got to pick up my daughter in an hour*\n- ~~Am I doing this right?~~\n- ~~RStudio? OMG, I don't get it~~\n:::\n:::\n:::{.column}\n:::\n::::\n\n## Fear is Part of Cognitive Load\n\n> ~~Am I Doing this Right?~~\n\n- Fear of doing something wrong\n- Everything we can do to alleviate fear, the less cognitive load learners will have.\n\n## RStudio / Positron Overwhelm {.nonincremental}\n\n![](rstudio.jpg)\n\n## Lower Friction for New Learners\n\n- Imagine you are brand new to working with programming\n- Feedback is important \n\n## Exercise {.smaller}\n\n+ Filter `penguins` so that it only shows penguins from the `island` of `Biscoe` (you'll have to use the `island` variable). Assign it to `biscoe_penguins`.\n\n:::{.fragment}\n\n::: {.cell exercise='ex_3'}\n```{webr}\n#| exercise: ex_3\n#add your filter statement here\nbiscoe_penguins <- filter(penguins, island == \"________\")\n\n#show number of crime movies\nnrow(biscoe_penguins)\n```\n:::\n\n\n::: { .solution exercise=\"ex_3\"}\n::: { .callout-tip collapse=false}\n\n\n::: {.cell exercise='ex_3' solution='true'}\n```{webr}\n#| exercise: ex_3\n#| solution: true\n#add your filter statement here\nbiscoe_penguins <- filter(penguins, island == \"Biscoe\")\n\n#show number of crime movies\nnrow(biscoe_penguins)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='ex_3' check='true'}\n```{webr}\n#| exercise: ex_3\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n:::\n\n## R-Bootcamp {.nonincremental}\n\n::::{.columns}\n:::{.column}\n- [R-Bootcamp](https://r-bootcamp.netlify.app)\n- [Github Repo](https://github.com/laderast/rbootcamp)\n:::\n:::{.column}\n![](rbootcamp.png)\n:::\n::::\n\n## In-Class Exercise Design Considerations\n\n- [x] Have all information available\n- [x] Reduce friction with practicing\n- [x] Use faded exercise design\n\n\n\n# Increase Active Learning \n\n## What is Active Learning?\n\n- Learning by doing\n- Activities that cement knowledge by application\n    - Meta-learning\n\n## Model Meta-learning\n\n- Learning how to learn\n- Help learners explore documentation\n\n## Exercise (R) {.smaller}\n\n- Look at the [documentation for `arrange()`](https://dplyr.tidyverse.org/reference/arrange.html). Take a look at the examples.\n\n- How do we change the below code to sort by descending order?\n\n\n:::{.fragment}\n\n::: {.cell exercise='ex_2' setup='true'}\n```{webr}\n#| exercise: ex_2\n#| setup: true\nlibrary(palmerpenguins)\npenguins <- penguins[1:6,]\nlibrary(dplyr)\n```\n:::\n\n\n\n::: {.cell exercise='ex_2'}\n```{webr}\n#| exercise: ex_2\npenguins |>\n    arrange(body_mass_g)\n```\n:::\n\n\n::: {.solution exercise=\"ex_2\"}\n#### Solution\n\nUse the `desc()` function.\n\n\n::: {.cell exercise='ex_2' solution='true'}\n```{webr}\n#| exercise: ex_2\n#| solution: true\npenguins |>\n    arrange(desc(body_mass_g))\n```\n:::\n\n:::\n\n\n::: {.cell exercise='ex_2' check='true'}\n```{webr}\n#| exercise: ex_2\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n:::\n\n## Active Learning\n\n- WebR/Pyodide is excellent at this\n- Use as part of lectures for practice\n\n# Increase Social Learning\n\n## What is Social Learning?\n\n- Learning is a cognitive process with social context\n- We learn better when we learn together\n- Discussion with your neighbor \n\n## WebR/Pyodide for Social Learning {.incremental}\n\n- Paired programming exercises\n- Make your own design decisions\n\t- Better Tables\n- Share packages for demos\n    - Data Snacks\n\n## [Better Plots](https://better-plots.netlify.app/) {.incremental}\n\n::::{.columns}\n:::{.column}\n- Take a Paper Doll approach to improving plots\n- Design in in the eye of the beholder\n    - Discuss what works for you\n- Sharing styling code with each other\n:::\n:::{.column}\n![https://wifflegif.com/gifs/477310-making-mr-right-sneak-peek-gif](paperdoll.gif)\n:::\n::::\n\n## Better Plots {.smaller}\n\nExperiment with adding or removing to the graph, adding your own annotations.\n\nIf there's a show that you want to highlight, try adding an annotation to highlight it. Or try adding an annotation at Roseanne's lowest rating!\n\n::::{.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n```{webr}\nmy_plot + \n    labs(title = \"Is it better to burn out than fade away?\",\n         x=\"Season Number\", y=\"Average Rating\") + \n  geom_vline(xintercept = 5, lty=3) +\n # annotate(geom=\"text\", x = 7, y=8.5, \n #         label = \"The Walking\\n Dead (brainzzz)\") +\n  scale_x_continuous(breaks = c(1:10))\n```\n:::\n\n\n## Python\n\n\n::: {.cell}\n```{pyodide}\nmy_plot = sns.lineplot(data=tv_shows,\n                 x=\"seasonNumber\",\n                 y=\"av_rating\",\n                 hue=\"title\")\n\n#my_plot.set_title(\"Is it better to burn out than fade away?\", fontsize=20)\n#my_plot.set_xlabel (\"Season Number\", fontsize=15)\n#my_plot.set_ylabel (\"Average Rating\", fontsize=15)\n#my_plot.set_xticks(range(1,11))\n#plt.axhline(y=7.8, linestyle=\"--\")\n#plt.text(x=7, y=8.5, s=\"The Walking\\n Dead (brainzzz)\")\nplt.show()\n```\n:::\n\n::::\n\n\n## [Data Snacks](https://hutchdatascience.org/data_snacks/)\n\n![](datasnack.jpg)\n\n## What's Next?\n\nWebR/Pyodide is part of a technology spectrum\n\n- [x] Follow up with session on RStudio / Positron / VSCode\n- [x] Have them work in Quarto on Posit.cloud\n- [x] Use WebR/Pyodide for in-class exercises\n\n## Note: Summative Assessment\n\n- Using WebR/Pyodide for summative assessment is difficult\n\t- Technically difficult \n\t\t- client side / source code is available in console\n\t- Come talk to George if you want to do this\n\n## Conclusion\n\nWebR/Pyodide is a powerful technology that can help you to:\n\n- Reduce Cognitive Load\n- Increase Active Learning\n- Increase Social Learning\n\n## Resources / Thanks!\n\n- George Stagg for all his work on WebR/Quarto Live and for tips\n\n- [This Talk](https://github.com/laderast/degress_of_freedom)\n- [RBootcamp](https://r-bootcamp.netlify.app)\n- [Data Snacks](https://hutchdatascience.org/data_snacks/)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}